tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = 2015, frequency = 12)
miModelo <-arima(Data, order = c(4,1,1))
a<-auto.arima(Data, trace = TRUE)
print(a$arma)
MiForecast<-forecast(miModelo, h=8)
plot(MiForecast)
}
a$arma[length(a$arma)-1]
a$arma
a$arma[length(a$arma)-1]
a$arma[length(a$arma)]
a$arma
a$arma[1]
a$arma[length(a$arma)-1]
a$arma[2]
a$arma
a$arma[1]
a$arma[length(a$arma)-1]
a$arma[2]
for(i in c(1:length(Agrupados$id_producto))){
producto<-factor(Agrupados[i,1])
ProductoPrueba<-Serie %>%
filter(id_producto == producto)
a<-auto.arima(Data, trace = TRUE)
print(a$arma)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = 2015, frequency = 12)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=8)
plot(MiForecast)
}
for(i in c(1:length(Agrupados$id_producto))){
producto<-factor(Agrupados[i,1])
ProductoPrueba<-Serie %>%
filter(id_producto == producto)
a<-auto.arima(Data, trace = TRUE)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = 2015, frequency = 12)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=8)
plot(MiForecast)
}
MiForecast<-forecast(miModelo, h=8)
MiForecast$mean
plot(MiForecast)
MiForecast<-forecast(miModelo, h=4)
MiForecast$mean
plot(MiForecast)
MiForecast<-forecast(miModelo, h=5)
MiForecast$mean
plot(MiForecast)
for(i in c(1:length(Agrupados$id_producto))){
producto<-factor(Agrupados[i,1])
ProductoPrueba<-Serie %>%
filter(id_producto == producto)
a<-auto.arima(Data, trace = TRUE)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = 2015, frequency = 12)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=8)
lattice::xyplot.ts(MiForecast)
}
for(i in c(1:length(Agrupados$id_producto))){
producto<-factor(Agrupados[i,1])
ProductoPrueba<-Serie %>%
filter(id_producto == producto)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = 2015, frequency = 12)
a<-auto.arima(Data, trace = TRUE)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=8)
plot(MiForecast)
}
forecastselector<-function(df,dfid, serie, inicio,frecuencia,hcast){
for(i in c(1:length(dfid))){
producto<-factor(df[i,1])
ProductoPrueba<-serie %>%
filter(id_producto == producto)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = inicio, frequency = frecuencia)
a<-auto.arima(Data, trace = TRUE)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=hcast)
plot(MiForecast)
}
}
forecastselector(
Agrupados$id_producto,
Agrupados,
Serie,
2015,
12,
8)
forecastselector(Agrupados$id_producto,Agrupados,Serie,2015,12,8)
forecastselector(Agrupados,Agrupados$id_producto,Serie,2015,12,8)
for(i in c(1:length(Agrupados$id_producto))){
producto<-factor(Agrupados[i,1])
ProductoPrueba<-Serie %>%
filter(id_producto == producto)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = 2015, frequency = 12)
a<-auto.arima(Data, trace = TRUE)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=8)
plot(MiForecast)
}
for(i in c(1:length(dfid))){
producto<-factor(df[i,1])
ProductoPrueba<-serie %>%
filter(id_producto == producto)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = inicio, frequency = frecuencia)
a<-auto.arima(Data, trace = TRUE)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=8)
plot(MiForecast)
}
MiForecast<-forecast(miModelo, h=8)
forecastselector<-function(df,dfid, serie, inicio,frecuencia,hcast){
for(i in c(1:length(dfid))){
producto<-factor(df[i,1])
ProductoPrueba<-serie %>%
filter(id_producto == producto)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = inicio, frequency = frecuencia)
a<-auto.arima(Data, trace = TRUE)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=8)
plot(MiForecast)
}
}
forecastselector(Agrupados,Agrupados$id_producto,Serie,2015,12,8)
forecastselector<-function(df,dfid, serie, inicio,frecuencia,hcast){
for(i in c(1:length(dfid))){
producto<-factor(df[i,1])
ProductoPrueba<-serie %>%
filter(id_producto == producto)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = 2015, frequency = 12)
a<-auto.arima(Data, trace = TRUE)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=8)
plot(MiForecast)
}
}
forecastselector(Agrupados,Agrupados$id_producto,Serie,2015,12,8)
forecastselector<-function(df,dfid, serie, inicio,frecuencia,hcast){
for(i in c(1:length(dfid))){
producto<-factor(df[i,1])
ProductoPrueba<-Serie %>%
filter(id_producto == producto)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = 2015, frequency = 12)
a<-auto.arima(Data, trace = TRUE)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=8)
plot(MiForecast)
}
}
forecastselector(Agrupados,Agrupados$id_producto,Serie,2015,12,8)
forecastselector<-function(df,dfid, serie, inicio,frecuencia,hcast){
for(i in c(1:length(Agrupados$id_producto))){
producto<-factor(Agrupados[i,1])
ProductoPrueba<-Serie %>%
filter(id_producto == producto)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = 2015, frequency = 12)
a<-auto.arima(Data, trace = TRUE)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=8)
plot(MiForecast)
}
}
forecastselector(Agrupados,Agrupados$id_producto,Serie,2015,12,8)
forecastselector<-function(df,dfid, serie, inicio,frecuencia,hcast){
for(i in c(1:length(Agrupados$id_producto))){
producto<-factor(Agrupados[i,1])
ProductoPrueba<-Serie %>%
filter(id_producto == producto)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = 2015, frequency = 12)
a<-auto.arima(Data, trace = TRUE)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=8)
plot(MiForecast)
}
}
forecastselector(Agrupados,Agrupados$id_producto,Serie,2015,12,8)
forecastselector<-function(df,dfid, serie, inicio,frecuencia,hcast){
for(i in c(1:length(dfid))){
producto<-factor(df[i,1])
ProductoPrueba<-serie %>%
filter(id_producto == producto)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = inicio, frequency = frecuencia)
a<-auto.arima(Data, trace = TRUE)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=hcast)
plot(MiForecast)
}
}
forecastselector(Agrupados,Agrupados$id_producto,Serie,2015,12,8)
forecastselector<-function(df,dfid, serie, inicio,frecuencia,hcast){
for(i in c(1:length(dfid))){
producto<-factor(df[i,1])
ProductoPrueba<-serie %>%
filter(id_producto == producto)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = inicio, frequency = frecuencia)
a<-auto.arima(Data, trace = TRUE)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=hcast)
plot(MiForecast)
}
}
forecastselector(Agrupados,Agrupados$id_producto,Serie,2015,12,8)
library(forecast)
library(tseries)
library(dplyr)
library(forecast)
library(tseries)
library(dplyr)
Serie<-read.csv("dataOut.csv")
Agrupados<-Serie %>%
group_by(id_producto) %>%
summarise(cantidad = n())
forecastselector<-function(df,dfid, serie, inicio,frecuencia,hcast){
for(i in c(1:length(dfid))){
producto<-factor(df[i,1])
ProductoPrueba<-serie %>%
filter(id_producto == producto)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = inicio, frequency = frecuencia)
a<-auto.arima(Data, trace = TRUE)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=hcast)
plot(MiForecast)
}
}
forecastselector(Agrupados,Agrupados$id_producto,Serie,2015,12,8)
Serie<-read.csv("dataOut.csv")
Agrupados<-Serie %>%
group_by(id_producto) %>%
summarise(cantidad = n())
forecastselector<-function(df,dfid, serie, inicio,frecuencia,hcast){
for(i in c(1:length(dfid))){
producto<-factor(df[i,1])
ProductoPrueba<-serie %>%
filter(id_producto == producto)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = inicio, frequency = frecuencia)
a<-auto.arima(Data, trace = TRUE)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=hcast)
plot(MiForecast)
}
}
forecastselector(Agrupados,Agrupados$id_producto,Serie,2015,12,8)
forecastselector<-function(df,dfid, serie, inicio,frecuencia,hcast){
for(i in c(1:length(dfid))){
producto<-factor(df[i,1])
ProductoPrueba<-serie %>%
filter(id_producto == producto)
tsData<-ts(ProductoPrueba$produccion)
Data<-ts(tsData, start = inicio, frequency = frecuencia)
a<-auto.arima(Data, trace = TRUE)
miModelo <-arima(Data, order = c(a$arma[1],a$arma[length(a$arma)-1],a$arma[2]))
MiForecast<-forecast(miModelo, h=hcast)
plot(MiForecast)
}
}
forecastselector(Agrupados,Agrupados$id_producto,Serie,2015,12,8)
* La formula quimica del agua es H~2~0 y la del carbonato de sodio es Na~2~CO~3~
* `H~2~0` = H~2~0
* `Na~2~CO~3~` = Na~2~CO~3~
* Tambien podemos incluir texto
* Precio~dia~ = `Precio~dia~`
* No puede incluir espacio
* Tambien podemos hacer exponentes X^2^
* x^2^ = `x^2^`
## Sub y Supra indice
unlink('DataScience/Product Development/markdown-lecture-master/Markdown_Learn_cache', recursive = TRUE)
library(flexdashboard)
library(dplyr)
library(readr)
stats <- read_csv("data/academatica_video_stats.csv")
videos <- read_csv("data/academatica_videos.csv")
metadata <- read_csv("data/academatica_videos_metadata.csv")
stats <- read_csv("data\academatica_video_stats.csv")
stats <- read_csv("data/academatica_video_stats.csv")
videos <- read_csv("data/academatica_videos.csv")
metadata <- read_csv("data/academatica_videos_metadata.csv")
metricas <-
stats %>%
summarise(total_like = sum(likeCount),
total_views = sum(viewCount),
total_dislikes = sum(dislikeCount),
total_comments = sum(commentCount))
library(flexdashboard)
library(dplyr)
library(readr)
library(lubridate)
library(flexdashboard)
library(dplyr)
library(readr)
library(lubridate)
library(flexdashboard)
library(dplyr)
library(readr)
library(lubridate)
videos %>%
mutate(year = year(ymd_hms(contentDetails.videoPublishedAt)),
month = month(ymd_hms(contentDetails.videoPublishedAt)),
year = as.factor(year),
month = as.factor(month)
) %>%
group_by(year, month) %>%
summarise(uploaded_videos = n_distinct(contentDetails.videoId)) %>%
ggplot(aes(x=month,Y=uploaded_videos,fill=year))+
geom_col(position = "dodge")
library(flexdashboard)
library(dplyr)
library(readr)
library(ggplot)
library(flexdashboard)
library(dplyr)
library(readr)
library(ggplot2)
library(lubridate)
videos %>%
mutate(year = year(ymd_hms(contentDetails.videoPublishedAt)),
month = month(ymd_hms(contentDetails.videoPublishedAt)),
year = as.factor(year),
month = as.factor(month)
) %>%
group_by(year, month) %>%
summarise(uploaded_videos = n_distinct(contentDetails.videoId)) %>%
ggplot(aes(x=month,Y=uploaded_videos,fill=year))+
geom_col(position = "dodge")
library(flexdashboard)
library(dplyr)
library(readr)
library(ggplot2)
library(lubridate)
videos %>%
mutate(year = year(ymd_hms(contentDetails.videoPublishedAt)),
month = month(ymd_hms(contentDetails.videoPublishedAt)),
year = as.factor(year),
month = as.factor(month)
) %>%
group_by(year, month) %>%
summarise(uploaded_videos = n_distinct(contentDetails.videoId) ) %>%
videos %>%
mutate(year = year(ymd_hms(contentDetails.videoPublishedAt)),
month = month(ymd_hms(contentDetails.videoPublishedAt)),
year = as.factor(year),
month = as.factor(month)
) %>%
group_by(year, month) %>%
summarise(uploaded_videos = n_distinct(contentDetails.videoId) )
videos %>%
mutate(year = year(ymd_hms(contentDetails.videoPublishedAt)),
month = month(ymd_hms(contentDetails.videoPublishedAt)),
year = as.factor(year),
month = as.factor(month)
)
videos %>%
mutate(year = year(ymd_hms(contentDetails.videoPublishedAt)),
month = month(ymd_hms(contentDetails.videoPublishedAt)),
year = as.factor(year),
month = as.factor(month)
) %>%
group_by(year, month)
videos %>%
mutate(year = year(ymd_hms(contentDetails.videoPublishedAt)),
month = month(ymd_hms(contentDetails.videoPublishedAt)),
year = as.factor(year),
month = as.factor(month)
) %>%
group_by(year, month) %>%
summarise(uploaded_videos = n_distinct(contentDetails.videoId) )
library(flexdashboard)
library(dplyr)
library(readr)
library(ggplot2)
library(lubridate)
library(DT)
library(flexdashboard)
library(dplyr)
library(readr)
library(ggplot2)
library(lubridate)
library(DT)
library(flexdashboard)
library(dplyr)
library(readr)
library(ggplot2)
library(lubridate)
library(DT)
library(tm)
library(flexdashboard)
library(dplyr)
library(readr)
library(ggplot2)
library(lubridate)
library(DT)
library(tm)
install.packages("tm")
library(flexdashboard)
library(dplyr)
library(readr)
library(ggplot2)
library(lubridate)
library(DT)
library(tm)
library(wordcloud)
library(flexdashboard)
library(dplyr)
library(readr)
library(ggplot2)
library(lubridate)
library(DT)
library(tm)
library(wordcloud)
install.packages("wordcloud")
library(flexdashboard)
library(dplyr)
library(readr)
library(ggplot2)
library(lubridate)
library(DT)
library(tm)
library(wordcloud)
library(flexdashboard)
library(dplyr)
library(readr)
library(ggplot2)
library(lubridate)
library(DT)
library(tm)
library(wordcloud)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(DT)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(DT)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(DT)
quake <- read_csv("data/earthquake.csv")
quake <- read_csv("data/earthquakedata.csv")
queake %>%
filter(yr==1995) %>%
datatable()
quake <- read_csv("data/earthquakedata.csv")
quake %>%
filter(yr==1995) %>%
datatable()
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(DT)
library(crosstalk)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(DT)
library(crosstalk)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(DT)
library(crosstalk)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(DT)
library(crosstalk)
shared_quake <- SharedData$new(quake %>% filter(yr>2000) )
filter_slider("mag","Magnitud",shared_quake,step = 0.1,column = ~mag)
SharedData$new(quake %>% filter(yr>2000) )
install.packages("crosstalk")
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(DT)
library(crosstalk)
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(DT)
library(crosstalk)
shared_quake <- SharedData$new(quake %>% filter(yr>2000) )
shared_quake <- SharedData$new(quakes[sample(nrow(quakes), 100),])
install.packages("shiny")
shiny::runApp('DataScience/Product Development/Tareas/shiny/Ejemplo_base')
runApp('DataScience/Product Development/Tareas/shiny/Ejemplo_base')
runApp('DataScience/Product Development/Tareas/shiny/Ejemplo_base')
